class TetrisGame {
   field Pillar pillar; 	// the pillar of this game
   field Square square;
   field int direction; 	// the pillar's current direction: 
							// 0=none, 1=up, 2=down, 3=left, 4=right
   field int block_type;    // 1 = square, 2 = pillar   	              

   /** Constructs a new Tetris Game. */
   constructor TetrisGame new() {
      let direction = 0;  // initial state is no movement
      let block_type = 0;
      return this;
   }

   /** Disposes this game. */
   method void dispose() {
      do pillar.dispose();
      do square.dispose();
      do Memory.deAlloc(this);
      return;
   }
   
   method void dispose_block() {
      if (block_type = 1) {do square.dispose(); }
      if (block_type = 2) {do pillar.dispose(); }
      return;
   }

   method void moveBlock() {
	  if (block_type = 1) {do moveSquare();}
	  if (block_type = 2) {do movePillar();}
	  return;
   }

   /** Moves the square in the current direction. */
   method void movePillar() {
      if (direction = 1) { do pillar.moveUp(); }
      if (direction = 2) { do pillar.moveDown(); }
      if (direction = 3) { do pillar.moveLeft(); }
      if (direction = 4) { do pillar.moveRight(); }
      do Sys.wait(100);  // delays the next movement
      return;
   }
   
   method void moveSquare() {
	  if (direction = 1) { do square.moveUp(); }
	  if (direction = 2) { do square.moveDown(); }
	  if (direction = 3) { do square.moveLeft(); }
	  if (direction = 4) { do square.moveRight(); }
	  do Sys.wait(100);  // delays the next movement
      return;
   }

   /** Runs the game: handles the user's inputs and moves the pillar accordingly */
   method void run() {
      var char key;  // the key currently pressed by the user
      var boolean exit;
      let exit = false;
      
      while (~exit) {
         // waits for a key to be pressed
         while (key = 0) {
            let key = Keyboard.keyPressed();
            let direction = 0;
         }
         
         if (key = 81)  { let exit = true; }     // q key
         
         if (key = 83)  { do dispose_block();
						  let square = Square.new(20,20,15);
						  let block_type = 1; }   // s key
						  
		 if (key = 80)  { do dispose_block();
						  let pillar = Pillar.new(20, 20, 15);
						  let block_type = 2; }  // p key
						  
		 if (key = 66)  { do Screen.clearScreen(); } // b key
						  	
         if (key = 131) { let direction = 1; }   // up arrow
         if (key = 133) { let direction = 2; }   // down arrow
         if (key = 130) { let direction = 3; }   // left arrow
         if (key = 132) { let direction = 4; }   // right arrow

         // waits for the key to be released
         while (~(key = 0)) {
            let key = Keyboard.keyPressed();
            do moveBlock();
            let direction = 0;
         }
     } // while
     return;
   }
}




