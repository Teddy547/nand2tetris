// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //A Register
    Mux16(a = instruction, b = ALUout, sel = instruction[15], out = MUX1out);
    Not(in = instruction[15], out = Ainstruction);
    And(a = instruction[15], b = instruction[5], out = CInstructionLoadA);
    Or(a = Ainstruction, b = CInstructionLoadA, out = loadA);
    ARegister(in = MUX1out, load = loadA, out = outA, out[0..14] = addressM);
    
    //ALU
    Mux16(a = outA, b = inM, sel = instruction[12], out = MUX2out);
    And(a = instruction[15], b = instruction[4], out = loadD);
    DRegister(in = ALUout, load = loadD, out = outD);
    ALU(x = outD, y = MUX2out, zx = instruction[11], nx = instruction[10], 
    zy = instruction[9], ny = instruction[8], f = instruction[7], 
    no = instruction[6], out = ALUout, out = outMemory, zr = zero, ng = neg);
    
    //writeM
    And(a = instruction[15], b = instruction[3], out =writeM, out = writeMemory);
    Mux16(a = false, b = outMemory, sel = writeMemory, out = outM);
    
    //Program Counter
    //JGT
    Or(a = zero, b = neg, out = outJGT);
    Not(in = outJGT, out = notoutJGT);
    And(a = instruction[0], b = notoutJGT, out = JGT);
    
    //JEQ
    And(a = instruction[1], b = zero, out = JEQ);
    
    //JLT
    Not(in = zero, out = notzero);
    And(a = neg, b = notzero, out = outJLT);
    And(a = instruction[2], b = outJLT, out = JLT);
    
    Or8Way(in[0] = false, in[1] = JGT, in[2] = JEQ, in[3] = false, 
    in[4] = JLT, in[5] = false, in[6] = false, in[7] = false, out = outJMP);
    And(a = instruction[15], b = outJMP, out = outCJMP);
    Not(in = outCJMP, out = notoutCJMP);
    PC(in = outA, load = outCJMP, inc = notoutCJMP, reset = reset, out[0..14] = pc);
}
