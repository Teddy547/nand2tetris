@256
D=A
@SP
M=D
@5
D=A
@14
M=D
@Sys.init
D=A
@15
M=D
@Sys.init$ret.0
D=A
@GLOBAL_CALL
0;JMP
(Sys.init$ret.0)
(GLOBAL_EQUAL)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@NOTEQUAL
D;JNE
@SP
A=M-1
M=-1
@AFTERNOTEQUAL
0;JMP
(NOTEQUAL)
@SP
A=M-1
M=0
(AFTERNOTEQUAL)
@15
A=M
0;JMP
(GLOBAL_GREATERTHAN)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@NOTGREATER
D;JLE
@SP
A=M-1
M=-1
@AFTERNOTGREATER
0;JMP
(NOTGREATER)
@SP
A=M-1
M=0
(AFTERNOTGREATER)
@15
A=M
0;JMP
(GLOBAL_LOWERTHAN)
@SP
AM=M-1
D=M
A=A-1
D=M-D
@NOTLOWER
D;JGE
@SP
A=M-1
M=-1
@AFTERNOTLOWER
0;JMP
(NOTLOWER)
@SP
A=M-1
M=0
(AFTERNOTLOWER)
@15
A=M
0;JMP
(GLOBAL_CALL)
@SP
M=M+1
A=M-1
M=D
@LCL
D=M
@SP
M=M+1
A=M-1
M=D
@ARG
D=M
@SP
M=M+1
A=M-1
M=D
@THIS
D=M
@SP
M=M+1
A=M-1
M=D
@THAT
D=M
@SP
M=M+1
A=M-1
M=D
@SP
D=M
@14
D=D-M
@ARG
M=D
@SP
D=M
@LCL
M=D
@15
A=M
0;JMP
(GLOBAL_RETURN)
@LCL
D=M
@14
M=D
@5
D=A
@14
A=M-D
D=M
@15
M=D
@0
D=A
@ARG
D=D+M
@13
M=D
@SP
AM=M-1
D=M
@13
A=M
M=D
@ARG
D=M+1
@SP
M=D
@1
D=A
@14
A=M-D
D=M
@THAT
M=D
@2
D=A
@14
A=M-D
D=M
@THIS
M=D
@3
D=A
@14
A=M-D
D=M
@ARG
M=D
@4
D=A
@14
A=M-D
D=M
@LCL
M=D
@15
A=M
0;JMP
(Main.fibonacci)
@0
D=A
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@SP
M=M+1
A=M-1
M=D
@LOWERTHAN.Main.14
D=A
@15
M=D
@GLOBAL_LOWERTHAN
0;JMP
(LOWERTHAN.Main.14)
@SP
AM=M-1
D=M
@Main.Main.fibonacci$IF_TRUE
D;JNE
@Main.Main.fibonacci$IF_FALSE
0;JMP
(Main.Main.fibonacci$IF_TRUE)
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
@GLOBAL_RETURN
0;JMP
(Main.Main.fibonacci$IF_FALSE)
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
@2
D=A
@SP
M=M+1
A=M-1
M=D
@SP
AM=M-1
D=M
A=A-1
M=M-D
@6
D=A
@14
M=D
@Main.fibonacci
D=A
@15
M=D
@Main.fibonacci$ret.1
D=A
@GLOBAL_CALL
0;JMP
(Main.fibonacci$ret.1)
@0
D=A
@ARG
A=D+M
D=M
@SP
M=M+1
A=M-1
M=D
@1
D=A
@SP
M=M+1
A=M-1
M=D
@SP
AM=M-1
D=M
A=A-1
M=M-D
@6
D=A
@14
M=D
@Main.fibonacci
D=A
@15
M=D
@Main.fibonacci$ret.2
D=A
@GLOBAL_CALL
0;JMP
(Main.fibonacci$ret.2)
@SP
AM=M-1
D=M
A=A-1
M=D+M
@GLOBAL_RETURN
0;JMP
(Sys.init)
@0
D=A
@4
D=A
@SP
M=M+1
A=M-1
M=D
@6
D=A
@14
M=D
@Main.fibonacci
D=A
@15
M=D
@Main.fibonacci$ret.3
D=A
@GLOBAL_CALL
0;JMP
(Main.fibonacci$ret.3)
(Sys.Sys.init$WHILE)
@Sys.Sys.init$WHILE
0;JMP
(END)
@END
0;JMP